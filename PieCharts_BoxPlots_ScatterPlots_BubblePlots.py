#
# author: F. Coppo
# description: pie chart, box plot, scatter plot and bubble plot.
# 

"""
	DATASET ANALYSYS: Area Plots, Histograms, and Bar Plots
"""
import numpy as np  # useful for many scientific computing in Python
import pandas as pd # primary data structure library

df_can = pd.read_excel('Canada.xlsx', sheet_name='Canada by Citizenship', skiprows=range(20),skipfooter=2)  # row to skip as input parameters (it depend on excel format)
df_can.drop(['AREA','REG','DEV','Type','Coverage'], axis='columns', inplace=True) 							# data clean up
df_can.rename(columns={'OdName':'Country', 'AreaName':'Continent', 'RegName':'Region'}, inplace=True) 		# rename the columns option
df_can.columns = list(map(str, df_can.columns))																# ensure that all column labels of type string

df_can.set_index('Country', inplace=True)   																# set country name as index
df_can['Total'] = df_can.sum(axis=1) 																		# add total column
years = list(map(str, range(1980, 2014)))																    # list of years from 1980 - 2013
print ('data dimensions:', df_can.shape)

"""
	VISUALIZING DATA with matplotlib:
	it is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms
"""
import matplotlib as mpl
import matplotlib.pyplot as plt # pyplot is Matplotlib's scripting layer
mpl.style.use(['ggplot']) # optional: for ggplot-like style

# PIE CHART (kind = pie)
df_continents = df_can.groupby('Continent', axis=0).sum() # group countries by continents and apply sum() function 
print(type(df_can.groupby('Continent', axis=0)))		  # the output of the groupby method is a `groupby' object and we can not use it further until we apply a function (eg .sum())
colors_list = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink']
explode_list = [0.1, 0, 0, 0, 0.1, 0.1] # ratio for each continent with which to offset each wedge.
df_continents['Total'].plot(kind='pie',
                            figsize=(5, 6),
                            autopct='%1.1f%%',   # add in percentages 
                            startangle=90,       # rotates the start of the pie chart by 90Â° degrees counterclockwise from the x-axis.
                            shadow=True,       	 #  Draws a shadow beneath the pie (to give a 3D feel).     
							labels=None,         # turn off labels on pie chart (add it as a separate legend)
                            pctdistance=1.12,    # the ratio between the center of each pie slice and the start of the text generated by autopct 
                            colors=colors_list,  # add custom colors
                            explode=explode_list # Explode the pie chart to emphasize the lowest three continents
                            )
plt.title('Immigration to Canada by Continent [1980 - 2013]')
plt.axis('equal') # Sets the pie chart to look like a circle
plt.legend(labels=df_continents.index, loc='upper left')  # add legend
plt.show()

# BOX PLOT
# plot for the Japanese immigrants between 1980 - 2013
df_japan = df_can.loc[['Japan'], years].transpose() # with extra square brackets around 'Japan' we will obtain it as a dataframe: this will help us with calling the dataframe.describe() method (to view the percentile)
df_japan.plot(kind='box', figsize=(8, 6))
plt.title('Box plot of Japanese Immigrants from 1980 - 2013')
plt.ylabel('Number of Immigrants')
plt.show()

# SUBPLOT: multiple plots within the same figure
df_CI= df_can.loc[['China', 'India'], years].transpose()
fig = plt.figure() # create figure
ax0 = fig.add_subplot(1, 2, 1) # add subplot 1 (1 row, 2 columns, first plot)
ax1 = fig.add_subplot(1, 2, 2) # add subplot 2 (1 row, 2 columns, second plot). See tip below**
# Subplot 1: Box plot
df_CI.plot(kind='box', color='blue', vert=False, figsize=(20, 6), ax=ax0) # add to subplot 1
ax0.set_title('Box Plots of Immigrants from China and India (1980 - 2013)')
ax0.set_xlabel('Number of Immigrants')
ax0.set_ylabel('Countries')
# Subplot 2: Line plot
df_CI.plot(kind='line', figsize=(20, 6), ax=ax1) # add to subplot 2
ax1.set_title ('Line Plots of Immigrants from China and India (1980 - 2013)')
ax1.set_ylabel('Number of Immigrants')
ax1.set_xlabel('Years')
plt.show()

# SCATTER PLOT (2D): while the datapoints are connected together by a line in a line plot, they are not connected in a scatter plot
# visualize the trend of total immigrantion to Canada (all countries combined) for the years 1980 - 2013
df_tot = pd.DataFrame(df_can[years].sum(axis=0)) # we can use the sum() method to get the total population per year
df_tot.index = map(int, df_tot.index)            # change the years to type int 
df_tot.reset_index(inplace = True)				 # reset the index to put in back in as a column in the df_tot dataframe	
df_tot.columns = ['year', 'total']				 # rename columns
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')
plt.show()

# plot a linear line of best fit
x = df_tot['year']      # year on x-axis
y = df_tot['total']     # total on y-axis
fit = np.polyfit(x, y, deg=1)
df_tot.plot(kind='scatter', x='year', y='total', figsize=(10, 6), color='darkblue')
plt.title('Total Immigration to Canada from 1980 - 2013')
plt.xlabel('Year')
plt.ylabel('Number of Immigrants')

# plot line of best fit
plt.plot(x, fit[0] * x + fit[1], color='red') # recall that x is the Years
plt.annotate('y={0:.0f} x + {1:.0f}'.format(fit[0], fit[1]), xy=(2000, 150000))
plt.show()

# print out the line of best fit
'No. Immigrants = {0:.0f} * Year + {1:.0f}'.format(fit[0], fit[1]) 

# BUBBLE PLOT: variation of the scatter plot that displays three dimensions of data (x, y, z)
df_can_t = df_can[years].transpose() 			# transposed dataframe
df_can_t.index = map(int, df_can_t.index) 		# cast the Years (the index) to type int
df_can_t.index.name = 'Year'					# let's label the index. This will automatically be the column name when we reset the index
df_can_t.reset_index(inplace=True)				# reset index to bring the Year in as a column

# Create the normalized weights: [X - Xmin/Xmax - Xmin]

# normalize Brazil data
norm_brazil = (df_can_t['Brazil'] - df_can_t['Brazil'].min()) / (df_can_t['Brazil'].max() - df_can_t['Brazil'].min())

# normalize Argentina data
norm_argentina = (df_can_t['Argentina'] - df_can_t['Argentina'].min()) / (df_can_t['Argentina'].max() - df_can_t['Argentina'].min())

# Brazil
ax0 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Brazil',
                    figsize=(14, 8),
                    alpha=0.5,                  # transparency
                    color='green',
                    s=norm_brazil * 2000 + 10,  # pass in weights 
                    xlim=(1975, 2015)
                   )

# Argentina
ax1 = df_can_t.plot(kind='scatter',
                    x='Year',
                    y='Argentina',
                    alpha=0.5,
                    color="blue",
                    s=norm_argentina * 2000 + 10,
                    ax = ax0
                   )

ax0.set_ylabel('Number of Immigrants')
ax0.set_title('Immigration from Brazil and Argentina from 1980 - 2013')
ax0.legend(['Brazil', 'Argentina'], loc='upper left', fontsize='x-large')
plt.show()
